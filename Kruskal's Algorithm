#include<bits/stdc++.h>
using namespace std;

class dsu {
    vector<int> parent, rank;
public:
    dsu(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i; 
        }
    }
    int findParent(int node) {
        if (parent[node] == node) {
            return node;
        }
        return parent[node] = findParent(parent[node]); // Path Compression
    }
    void unionByRank(int u, int v) {
        int pu = findParent(u);
        int pv = findParent(v);
        if (pu == pv) {
            return;
        }
        if (rank[pu] < rank[pv]) {
            parent[pu] = pv;
        } else if (rank[pu] > rank[pv]) {
            parent[pv] = pu;
        } else {
            parent[pv] = pu;
            rank[pu]++;
        }
    }
};

int main() {
    int n, m;
    cin >> n >> m; 
    vector<pair<int, pair<int, int>>> edges;
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        edges.push_back({w, {u, v}});
    }
    dsu d(n);
    int sum = 0;
    sort(edges.begin(), edges.end());
    for (auto &it : edges) {
        int w = it.first;
        int u = it.second.first;
        int v = it.second.second;
        if (d.findParent(u) != d.findParent(v)) {
            sum += w;
            d.unionByRank(u, v);
        }
    }
    cout << sum << endl;
}
