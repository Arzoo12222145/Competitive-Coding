#include<bits/stdc++.h>
using namespace std;

class dsu{
    vector<int> parent,rank,size;
public:
    dsu(int n){
        parent.resize(n);
        size.resize(n,1);
        rank.resize(n,0);
        for(int i = 0; i < n;i++){
            parent.push_back(i);
        }
    }
    int findParent(int node){
        if(parent[node] == node){
            return node;
        }
        return parent[node] = findParent(parent[node]); //Path Compression
    }
    void unionBySize(int u, int v){
        int pu = findParent(u);
        int pv = findParent(v);
        if(pu == pv){
            return;
        }
        if(size[pu] < size[pv]){
            parent[pu] = pv;
            size[pu]+=size[pv];
        }
        else{
            parent[pv] = pu;
            size[pv]+=size[pu];
        }
    }
    void unionByRank(int u, int v){
        int pu = findParent(u);
        int pv = findParent(v);
        if(pu == pv){
            return;
        }
        if(rank[pu] == rank[pv]){
            parent[pu] = pv;
            rank[pu]++;
        }
        else if(rank[pu] < rank[pv]){
            parent[pu] = pv;
        }
        else{
            parent[pv] = pu;
        }
    }
    bool isConnected(int u, int v) {
        return findParent(u) == findParent(v);
    }
};
int main(){
    int n,q;cin>>n>>q;
    dsu ds(n);
    while(q--){
        int u,v;
        cin>>u>>v;
        // ds.unionByRank(u,v);
        ds.unionBySize(u,v);
    }
    int a,b;
    cin>>a>>b;
    cout << ds.isConnected(a,b) << endl;
}
